// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RpcMessage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_RpcMessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_RpcMessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_RpcMessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_RpcMessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_RpcMessage_2eproto;
namespace Message {
class MessageEntry;
class MessageEntryDefaultTypeInternal;
extern MessageEntryDefaultTypeInternal _MessageEntry_default_instance_;
class MessageInfo;
class MessageInfoDefaultTypeInternal;
extern MessageInfoDefaultTypeInternal _MessageInfo_default_instance_;
class Reply;
class ReplyDefaultTypeInternal;
extern ReplyDefaultTypeInternal _Reply_default_instance_;
}  // namespace Message
PROTOBUF_NAMESPACE_OPEN
template<> ::Message::MessageEntry* Arena::CreateMaybeMessage<::Message::MessageEntry>(Arena*);
template<> ::Message::MessageInfo* Arena::CreateMaybeMessage<::Message::MessageInfo>(Arena*);
template<> ::Message::Reply* Arena::CreateMaybeMessage<::Message::Reply>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Message {

// ===================================================================

class Reply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Message.Reply) */ {
 public:
  Reply();
  virtual ~Reply();

  Reply(const Reply& from);
  Reply(Reply&& from) noexcept
    : Reply() {
    *this = ::std::move(from);
  }

  inline Reply& operator=(const Reply& from) {
    CopyFrom(from);
    return *this;
  }
  inline Reply& operator=(Reply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Reply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Reply* internal_default_instance() {
    return reinterpret_cast<const Reply*>(
               &_Reply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Reply& a, Reply& b) {
    a.Swap(&b);
  }
  inline void Swap(Reply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Reply* New() const final {
    return CreateMaybeMessage<Reply>(nullptr);
  }

  Reply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Reply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Reply& from);
  void MergeFrom(const Reply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Reply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Message.Reply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RpcMessage_2eproto);
    return ::descriptor_table_RpcMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRetFieldNumber = 1,
  };
  // bool ret = 1;
  void clear_ret();
  bool ret() const;
  void set_ret(bool value);
  private:
  bool _internal_ret() const;
  void _internal_set_ret(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Message.Reply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RpcMessage_2eproto;
};
// -------------------------------------------------------------------

class MessageInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Message.MessageInfo) */ {
 public:
  MessageInfo();
  virtual ~MessageInfo();

  MessageInfo(const MessageInfo& from);
  MessageInfo(MessageInfo&& from) noexcept
    : MessageInfo() {
    *this = ::std::move(from);
  }

  inline MessageInfo& operator=(const MessageInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageInfo& operator=(MessageInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageInfo* internal_default_instance() {
    return reinterpret_cast<const MessageInfo*>(
               &_MessageInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MessageInfo& a, MessageInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageInfo* New() const final {
    return CreateMaybeMessage<MessageInfo>(nullptr);
  }

  MessageInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageInfo& from);
  void MergeFrom(const MessageInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Message.MessageInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RpcMessage_2eproto);
    return ::descriptor_table_RpcMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
    kCarIdFieldNumber = 2,
  };
  // string timestamp = 1;
  void clear_timestamp();
  const std::string& timestamp() const;
  void set_timestamp(const std::string& value);
  void set_timestamp(std::string&& value);
  void set_timestamp(const char* value);
  void set_timestamp(const char* value, size_t size);
  std::string* mutable_timestamp();
  std::string* release_timestamp();
  void set_allocated_timestamp(std::string* timestamp);
  private:
  const std::string& _internal_timestamp() const;
  void _internal_set_timestamp(const std::string& value);
  std::string* _internal_mutable_timestamp();
  public:

  // uint32 carId = 2;
  void clear_carid();
  ::PROTOBUF_NAMESPACE_ID::uint32 carid() const;
  void set_carid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_carid() const;
  void _internal_set_carid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Message.MessageInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 carid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RpcMessage_2eproto;
};
// -------------------------------------------------------------------

class MessageEntry :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Message.MessageEntry) */ {
 public:
  MessageEntry();
  virtual ~MessageEntry();

  MessageEntry(const MessageEntry& from);
  MessageEntry(MessageEntry&& from) noexcept
    : MessageEntry() {
    *this = ::std::move(from);
  }

  inline MessageEntry& operator=(const MessageEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageEntry& operator=(MessageEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageEntry* internal_default_instance() {
    return reinterpret_cast<const MessageEntry*>(
               &_MessageEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MessageEntry& a, MessageEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageEntry* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageEntry* New() const final {
    return CreateMaybeMessage<MessageEntry>(nullptr);
  }

  MessageEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageEntry& from);
  void MergeFrom(const MessageEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Message.MessageEntry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RpcMessage_2eproto);
    return ::descriptor_table_RpcMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
    kImgFieldNumber = 9,
    kCarIdFieldNumber = 2,
    kXFieldNumber = 3,
    kYFieldNumber = 4,
    kVXFieldNumber = 5,
    kVYFieldNumber = 6,
    kVRFieldNumber = 7,
    kDirectionFieldNumber = 8,
  };
  // string timestamp = 1;
  void clear_timestamp();
  const std::string& timestamp() const;
  void set_timestamp(const std::string& value);
  void set_timestamp(std::string&& value);
  void set_timestamp(const char* value);
  void set_timestamp(const char* value, size_t size);
  std::string* mutable_timestamp();
  std::string* release_timestamp();
  void set_allocated_timestamp(std::string* timestamp);
  private:
  const std::string& _internal_timestamp() const;
  void _internal_set_timestamp(const std::string& value);
  std::string* _internal_mutable_timestamp();
  public:

  // string img = 9;
  void clear_img();
  const std::string& img() const;
  void set_img(const std::string& value);
  void set_img(std::string&& value);
  void set_img(const char* value);
  void set_img(const char* value, size_t size);
  std::string* mutable_img();
  std::string* release_img();
  void set_allocated_img(std::string* img);
  private:
  const std::string& _internal_img() const;
  void _internal_set_img(const std::string& value);
  std::string* _internal_mutable_img();
  public:

  // uint32 carId = 2;
  void clear_carid();
  ::PROTOBUF_NAMESPACE_ID::uint32 carid() const;
  void set_carid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_carid() const;
  void _internal_set_carid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 x = 3;
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::uint32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 y = 4;
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::uint32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 v_x = 5;
  void clear_v_x();
  ::PROTOBUF_NAMESPACE_ID::uint32 v_x() const;
  void set_v_x(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_v_x() const;
  void _internal_set_v_x(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 v_y = 6;
  void clear_v_y();
  ::PROTOBUF_NAMESPACE_ID::uint32 v_y() const;
  void set_v_y(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_v_y() const;
  void _internal_set_v_y(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 v_r = 7;
  void clear_v_r();
  ::PROTOBUF_NAMESPACE_ID::uint32 v_r() const;
  void set_v_r(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_v_r() const;
  void _internal_set_v_r(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 direction = 8;
  void clear_direction();
  ::PROTOBUF_NAMESPACE_ID::uint32 direction() const;
  void set_direction(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_direction() const;
  void _internal_set_direction(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Message.MessageEntry)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timestamp_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr img_;
  ::PROTOBUF_NAMESPACE_ID::uint32 carid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 x_;
  ::PROTOBUF_NAMESPACE_ID::uint32 y_;
  ::PROTOBUF_NAMESPACE_ID::uint32 v_x_;
  ::PROTOBUF_NAMESPACE_ID::uint32 v_y_;
  ::PROTOBUF_NAMESPACE_ID::uint32 v_r_;
  ::PROTOBUF_NAMESPACE_ID::uint32 direction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RpcMessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Reply

// bool ret = 1;
inline void Reply::clear_ret() {
  ret_ = false;
}
inline bool Reply::_internal_ret() const {
  return ret_;
}
inline bool Reply::ret() const {
  // @@protoc_insertion_point(field_get:Message.Reply.ret)
  return _internal_ret();
}
inline void Reply::_internal_set_ret(bool value) {
  
  ret_ = value;
}
inline void Reply::set_ret(bool value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:Message.Reply.ret)
}

// -------------------------------------------------------------------

// MessageInfo

// string timestamp = 1;
inline void MessageInfo::clear_timestamp() {
  timestamp_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MessageInfo::timestamp() const {
  // @@protoc_insertion_point(field_get:Message.MessageInfo.timestamp)
  return _internal_timestamp();
}
inline void MessageInfo::set_timestamp(const std::string& value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Message.MessageInfo.timestamp)
}
inline std::string* MessageInfo::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:Message.MessageInfo.timestamp)
  return _internal_mutable_timestamp();
}
inline const std::string& MessageInfo::_internal_timestamp() const {
  return timestamp_.GetNoArena();
}
inline void MessageInfo::_internal_set_timestamp(const std::string& value) {
  
  timestamp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MessageInfo::set_timestamp(std::string&& value) {
  
  timestamp_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Message.MessageInfo.timestamp)
}
inline void MessageInfo::set_timestamp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  timestamp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Message.MessageInfo.timestamp)
}
inline void MessageInfo::set_timestamp(const char* value, size_t size) {
  
  timestamp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Message.MessageInfo.timestamp)
}
inline std::string* MessageInfo::_internal_mutable_timestamp() {
  
  return timestamp_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MessageInfo::release_timestamp() {
  // @@protoc_insertion_point(field_release:Message.MessageInfo.timestamp)
  
  return timestamp_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MessageInfo::set_allocated_timestamp(std::string* timestamp) {
  if (timestamp != nullptr) {
    
  } else {
    
  }
  timestamp_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timestamp);
  // @@protoc_insertion_point(field_set_allocated:Message.MessageInfo.timestamp)
}

// uint32 carId = 2;
inline void MessageInfo::clear_carid() {
  carid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MessageInfo::_internal_carid() const {
  return carid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MessageInfo::carid() const {
  // @@protoc_insertion_point(field_get:Message.MessageInfo.carId)
  return _internal_carid();
}
inline void MessageInfo::_internal_set_carid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  carid_ = value;
}
inline void MessageInfo::set_carid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_carid(value);
  // @@protoc_insertion_point(field_set:Message.MessageInfo.carId)
}

// -------------------------------------------------------------------

// MessageEntry

// string timestamp = 1;
inline void MessageEntry::clear_timestamp() {
  timestamp_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MessageEntry::timestamp() const {
  // @@protoc_insertion_point(field_get:Message.MessageEntry.timestamp)
  return _internal_timestamp();
}
inline void MessageEntry::set_timestamp(const std::string& value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Message.MessageEntry.timestamp)
}
inline std::string* MessageEntry::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:Message.MessageEntry.timestamp)
  return _internal_mutable_timestamp();
}
inline const std::string& MessageEntry::_internal_timestamp() const {
  return timestamp_.GetNoArena();
}
inline void MessageEntry::_internal_set_timestamp(const std::string& value) {
  
  timestamp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MessageEntry::set_timestamp(std::string&& value) {
  
  timestamp_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Message.MessageEntry.timestamp)
}
inline void MessageEntry::set_timestamp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  timestamp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Message.MessageEntry.timestamp)
}
inline void MessageEntry::set_timestamp(const char* value, size_t size) {
  
  timestamp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Message.MessageEntry.timestamp)
}
inline std::string* MessageEntry::_internal_mutable_timestamp() {
  
  return timestamp_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MessageEntry::release_timestamp() {
  // @@protoc_insertion_point(field_release:Message.MessageEntry.timestamp)
  
  return timestamp_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MessageEntry::set_allocated_timestamp(std::string* timestamp) {
  if (timestamp != nullptr) {
    
  } else {
    
  }
  timestamp_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timestamp);
  // @@protoc_insertion_point(field_set_allocated:Message.MessageEntry.timestamp)
}

// uint32 carId = 2;
inline void MessageEntry::clear_carid() {
  carid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MessageEntry::_internal_carid() const {
  return carid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MessageEntry::carid() const {
  // @@protoc_insertion_point(field_get:Message.MessageEntry.carId)
  return _internal_carid();
}
inline void MessageEntry::_internal_set_carid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  carid_ = value;
}
inline void MessageEntry::set_carid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_carid(value);
  // @@protoc_insertion_point(field_set:Message.MessageEntry.carId)
}

// uint32 x = 3;
inline void MessageEntry::clear_x() {
  x_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MessageEntry::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MessageEntry::x() const {
  // @@protoc_insertion_point(field_get:Message.MessageEntry.x)
  return _internal_x();
}
inline void MessageEntry::_internal_set_x(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  x_ = value;
}
inline void MessageEntry::set_x(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Message.MessageEntry.x)
}

// uint32 y = 4;
inline void MessageEntry::clear_y() {
  y_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MessageEntry::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MessageEntry::y() const {
  // @@protoc_insertion_point(field_get:Message.MessageEntry.y)
  return _internal_y();
}
inline void MessageEntry::_internal_set_y(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  y_ = value;
}
inline void MessageEntry::set_y(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Message.MessageEntry.y)
}

// uint32 v_x = 5;
inline void MessageEntry::clear_v_x() {
  v_x_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MessageEntry::_internal_v_x() const {
  return v_x_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MessageEntry::v_x() const {
  // @@protoc_insertion_point(field_get:Message.MessageEntry.v_x)
  return _internal_v_x();
}
inline void MessageEntry::_internal_set_v_x(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  v_x_ = value;
}
inline void MessageEntry::set_v_x(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_v_x(value);
  // @@protoc_insertion_point(field_set:Message.MessageEntry.v_x)
}

// uint32 v_y = 6;
inline void MessageEntry::clear_v_y() {
  v_y_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MessageEntry::_internal_v_y() const {
  return v_y_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MessageEntry::v_y() const {
  // @@protoc_insertion_point(field_get:Message.MessageEntry.v_y)
  return _internal_v_y();
}
inline void MessageEntry::_internal_set_v_y(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  v_y_ = value;
}
inline void MessageEntry::set_v_y(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_v_y(value);
  // @@protoc_insertion_point(field_set:Message.MessageEntry.v_y)
}

// uint32 v_r = 7;
inline void MessageEntry::clear_v_r() {
  v_r_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MessageEntry::_internal_v_r() const {
  return v_r_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MessageEntry::v_r() const {
  // @@protoc_insertion_point(field_get:Message.MessageEntry.v_r)
  return _internal_v_r();
}
inline void MessageEntry::_internal_set_v_r(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  v_r_ = value;
}
inline void MessageEntry::set_v_r(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_v_r(value);
  // @@protoc_insertion_point(field_set:Message.MessageEntry.v_r)
}

// uint32 direction = 8;
inline void MessageEntry::clear_direction() {
  direction_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MessageEntry::_internal_direction() const {
  return direction_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MessageEntry::direction() const {
  // @@protoc_insertion_point(field_get:Message.MessageEntry.direction)
  return _internal_direction();
}
inline void MessageEntry::_internal_set_direction(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  direction_ = value;
}
inline void MessageEntry::set_direction(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:Message.MessageEntry.direction)
}

// string img = 9;
inline void MessageEntry::clear_img() {
  img_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MessageEntry::img() const {
  // @@protoc_insertion_point(field_get:Message.MessageEntry.img)
  return _internal_img();
}
inline void MessageEntry::set_img(const std::string& value) {
  _internal_set_img(value);
  // @@protoc_insertion_point(field_set:Message.MessageEntry.img)
}
inline std::string* MessageEntry::mutable_img() {
  // @@protoc_insertion_point(field_mutable:Message.MessageEntry.img)
  return _internal_mutable_img();
}
inline const std::string& MessageEntry::_internal_img() const {
  return img_.GetNoArena();
}
inline void MessageEntry::_internal_set_img(const std::string& value) {
  
  img_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MessageEntry::set_img(std::string&& value) {
  
  img_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Message.MessageEntry.img)
}
inline void MessageEntry::set_img(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  img_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Message.MessageEntry.img)
}
inline void MessageEntry::set_img(const char* value, size_t size) {
  
  img_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Message.MessageEntry.img)
}
inline std::string* MessageEntry::_internal_mutable_img() {
  
  return img_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MessageEntry::release_img() {
  // @@protoc_insertion_point(field_release:Message.MessageEntry.img)
  
  return img_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MessageEntry::set_allocated_img(std::string* img) {
  if (img != nullptr) {
    
  } else {
    
  }
  img_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), img);
  // @@protoc_insertion_point(field_set_allocated:Message.MessageEntry.img)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Message

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_RpcMessage_2eproto
